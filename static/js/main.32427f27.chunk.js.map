{"version":3,"sources":["components/ContactsItem/ContactsItem.module.css","components/ContactsList/ContactsList.module.css","components/ContactsFilter/ContactsFilter.module.css","components/App/App.module.css","components/Form/Form.module.css","components/Form/Form.jsx","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","components/ContactsFilter/ContactsFilter.jsx","components/App/App.js","index.js"],"names":["module","exports","Form","state","name","number","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","className","css","form","this","type","pattern","title","required","onChange","id","input","button","Component","ContactsItem","onDeleteContact","item","item__button","onClick","ContactsList","contacts","list","map","contact","ContactsFilter","filter__label","App","filter","addContact","profile","prevState","find","toLowerCase","alert","deleteContact","onChangeFilter","getFilteredContacts","includes","localStorage","getItem","parsedContacts","JSON","parse","nextContacts","setItem","stringify","app","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32427f27.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactsItem_item__1xeRu\",\"item__button\":\"ContactsItem_item__button__1rbXZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__cFt7i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__label\":\"ContactsFilter_filter__label__xD73n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__KvT-m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1FEUJ\",\"input\":\"Form_input__1iP-1\",\"button\":\"Form_button__2Tf5F\"};","import { Component } from 'react';\nimport shortid from 'shortid';\n\nimport css from '../Form/Form.module.css';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form className={css.form} onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={this.handleChange}\n            id={this.nameInputId}\n            className={css.input}\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            onChange={this.handleChange}\n            id={this.numberInputId}\n            className={css.input}\n          />\n        </label>\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import PropTypes from 'prop-types';\nimport css from '../ContactsItem/ContactsItem.module.css';\n\nconst ContactsItem = ({ name, number, id, onDeleteContact }) => (\n  <li className={css.item}>\n    <span>{name}: </span>\n    <span>{number} </span>\n    <span>\n      <button\n        className={css.item__button}\n        type=\"button\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </span>\n  </li>\n);\n\nContactsItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  id: PropTypes.string,\n  onDeleteContact: PropTypes.func,\n};\n\nexport default ContactsItem;\n","import PropTypes from 'prop-types';\nimport ContactsItem from '../ContactsItem/ContactsItem';\nimport css from '../ContactsList/ContactsList.module.css';\n\nconst ContactsList = ({ contacts, onDeleteContact }) => (\n  <ul className={css.list}>\n    {contacts.map(contact => (\n      <ContactsItem\n        key={contact.id}\n        id={contact.id}\n        name={contact.name}\n        number={contact.number}\n        onDeleteContact={onDeleteContact}\n      />\n    ))}\n  </ul>\n);\n\nContactsList.propTypes = {\n  contacts: PropTypes.array,\n};\n\nexport default ContactsList;\n","import PropTypes from 'prop-types';\nimport css from '../ContactsFilter/ContactsFilter.module.css';\n\nconst ContactsFilter = ({ value, onChange }) => (\n  <label className={css.filter__label}>\n    Find contacts by name\n    <input\n      type=\"text\"\n      value={value}\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      onChange={onChange}\n    />\n  </label>\n);\n\nContactsFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default ContactsFilter;\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport Form from '../Form/Form';\nimport ContactsList from '../ContactsList/ContactsList';\nimport ContactsFilter from '../ContactsFilter/ContactsFilter';\n\nimport css from './App.module.css';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem('contacts', JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = profile => {\n    const contact = {\n      id: shortid.generate(),\n      name: profile.name,\n      number: profile.number,\n    };\n\n    this.setState(prevState => {\n      const isRepeatName = prevState.contacts.find(\n        contact => contact.name.toLowerCase() === profile.name.toLowerCase(),\n      );\n\n      if (!isRepeatName) {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      }\n\n      alert(`${profile.name} is already in contacts`);\n      return { ...prevState };\n    });\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  onChangeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  getFilteredContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n\n    return (\n      <div className={css.app}>\n        <h1>Phonebook</h1>\n        <Form onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        <ContactsFilter value={filter} onChange={this.onChangeFilter} />\n\n        <ContactsList\n          contacts={this.getFilteredContacts()}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}